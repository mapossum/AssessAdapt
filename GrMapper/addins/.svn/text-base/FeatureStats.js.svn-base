

Ext.define('GrMapper.addins.FeatureStats', {
    extend: 'Ext.menu.Item',
	//requires: ['GrMapper.GrMap'],
	alias: 'widget.featurestats',
	
	windowopen: false,
	
	text: "Assess and Adapt",
	
	config: {
        map: {}
    },
	
    initComponent: function() {
		
		this.callParent();

	    //Ext.data.JsonP.request({url:this.url,params:{f:'json'},success: this.loadInitial, scope: this})	;
														   										   
		
		this.on('click', this.shawToolWindow, this)
		
	},
	
	shawToolWindow: function() {
		
		if (this.windowopen == false) {
			
		
		this.toolWindow = new Ext.Window({
                			layout      : 'fit',
               				closeAction :'close',
							title: 'Assess and Adapt',
							width		: 400,
							height		: 400,
							autoScroll : true,
                			plain       : true,
							resizable   : true,
							constrain: true,
							collapsible: false,
							//listeners: {beforeclose:this.closetool},
							closable: true,
							modal: false ,
                			items: [{xtype:'container', html:'Click on a watershed to get more information'}]
            			});
		
			
		this.toolWindow.show();
		//this.map.on('click', alert(''), this)

		
		this.maplayer = new esri.layers.ArcGISDynamicMapServiceLayer("http://tnc.usm.edu/ArcGIS/rest/services/IMDS/Watersheds/MapServer");
		this.maplayer.setOpacity(0.6)		
        this.map.addLayer(this.maplayer);
		
		
		
		var wsrenderer = new esri.renderer.SimpleRenderer(new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_NULL,new dojo.Color([0,0,0]), 0),new dojo.Color([255, 0, 0, 0.3])));
		
		
		this.featureLayer = new esri.layers.FeatureLayer("http://tnc.usm.edu/ArcGIS/rest/services/IMDS/Watersheds/MapServer/0",{
          mode: esri.layers.FeatureLayer.MODE_SELECTION,
         outFields: ["*"]
        });
		
		this.featureLayer.setRenderer(wsrenderer);
		
		this.featureLayer.setMaxAllowableOffset(10);
        
        this.map.addLayer(this.featureLayer);
		
		thing = this;
		this.clickhandle = dojo.connect(this.map,"onClick", this.genreport, thing);
		
		initExtent = new esri.geometry.Extent({"xmin":-9986841.20216703,"ymin":5051578.21578541,"xmax":-9343934.68771502,"ymax":5898729.28427151,"spatialReference":{"wkid":102100}});
		this.map.setExtent(initExtent);
		
		this.toolWindow.on('beforeclose',this.closetool, this)
		
		this.toolWindow.alignTo(document,"tr-tr", [-2, 80]);
		
		this.windowopen = true;
		
		}
		
	},
	
	closetool: function() {
	
		this.map.removeLayer(this.maplayer);
		this.map.removeLayer(this.featureLayer);
		
		dojo.disconnect(this.clickhandle);
		
		this.windowopen = false;

		
	},
	
	genreport: function(evt) {
		
		thing.toolWindow.removeAll();
	
	      var query = new esri.tasks.Query();
		  
		  toleranceInPixel = 1;
		  point = evt.mapPoint;
		  var pixelWidth = thing.map.extent.getWidth() / thing.map.width;
       	  var toleraceInMapCoords = toleranceInPixel * pixelWidth;
		  query.geometry = new esri.geometry.Extent(point.x - toleraceInMapCoords,
                    point.y - toleraceInMapCoords,
                    point.x + toleraceInMapCoords,
                    point.y + toleraceInMapCoords,
                    thing.map.spatialReference );
		  
          
          thing.featureLayer.selectFeatures(query,esri.layers.FeatureLayer.SELECTION_NEW,function(f,sm) {thing.featureSelector(f,sm,thing)});
	
	},
	
	featureSelector: function(features, selectionMethod) {
		
		this.toolWindow.removeAll();
		
		
		//alert(features[0].attributes.SPGoal)
			
var store1 = Ext.create('Ext.data.JsonStore', {
    fields: ['name', 'Goal', 'Sturgeon Population'],
    data: [
        { 'name': '2005',   'Goal': features[0].attributes.SPGoal, 'Sturgeon Population': features[0].attributes.SP2005},
        { 'name': '2006',   'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2006},
        { 'name': '2007', 'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2007},
        { 'name': '2008',  'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2008},
        { 'name': '2009',  'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2009},
		{ 'name': '2010',  'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2010},
		{ 'name': '2011',  'Goal': features[0].attributes.SPGoal,  'Sturgeon Population': features[0].attributes.SP2011}
    ]
});

spchart = Ext.create('Ext.chart.Chart', {
    width: 395,
    height: 395,
	title: "Sturgeon Population",
    animate: true,
    store: store1,
	background: {
    //color string
    fill: '#FFF'
	},
	legend: {
        position: 'bottom'
    },
    axes: [
        {
            type: 'Numeric',
            position: 'left',
            fields: ['Goal', 'Sturgeon Population'],
            label: {
                renderer: Ext.util.Format.numberRenderer('0,0')
            },
            title: 'Sturgeon Population',
            grid: true,
            minimum: 0
        },
        {
            type: 'Category',
            position: 'bottom',
            fields: ['name'],
            title: 'Year'
        }
    ],
    series: [
        {
            type: 'line',
            highlight: {
                size: 7,
                radius: 7
            },
            axis: 'left',
            xField: 'name',
            yField: 'Goal',
            markerConfig: {
                type: 'cross',
                size: 4,
                radius: 4,
                'stroke-width': 0
            }
        },
        {
            type: 'line',
            style: {
    stroke: '#00ff00',
    'stroke-width': 2,
    opacity: 0.9
},
            
            axis: 'left',
            fill: false,
            xField: 'name',
            yField: 'Sturgeon Population',
            markerConfig: {
                type: 'circle',
                size: 4,
                radius: 4,
                'stroke-width': 0
            }
        }
    ]
});


var store2 = Ext.create('Ext.data.JsonStore', {
    fields: ['name', 'Goal', 'Miles Connected'],
    data: [
        { 'name': '2005',   'Goal': features[0].attributes.MCGoal, 'Miles Connected': features[0].attributes.MC2005},
        { 'name': '2006',   'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2006},
        { 'name': '2007',  'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2007},
        { 'name': '2008',  'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2008},
        { 'name': '2009',  'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2009},
		{ 'name': '2010',  'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2010},
		{ 'name': '2011',  'Goal': features[0].attributes.MCGoal,  'Miles Connected': features[0].attributes.MC2011}
    ]
});

mcchart = Ext.create('Ext.chart.Chart', {
    width: 395,
    height: 395,
	title: "Miles Connected",
    animate: true,
    store: store2,
	background: {
    //color string
    fill: '#FFF'
	},
	legend: {
        position: 'bottom'
    },
    axes: [
        {
            type: 'Numeric',
            position: 'left',
            fields: ['Goal', 'Miles Connected'],
            label: {
                renderer: Ext.util.Format.numberRenderer('0,0')
            },
            title: 'Miles Connected',
            grid: true,
            minimum: 0
        },
        {
            type: 'Category',
            position: 'bottom',
            fields: ['name'],
            title: 'Year'
        }
    ],
    series: [
        {
            type: 'line',
            highlight: {
                size: 7,
                radius: 7
            },
            axis: 'left',
            xField: 'name',
            yField: 'Goal',
            markerConfig: {
                type: 'cross',
                size: 4,
                radius: 4,
                'stroke-width': 0
            }
        },
        {
            type: 'line',
            style: {
    stroke: '#00ff00',
    'stroke-width': 2,
    opacity: 0.9
},
            
            axis: 'left',
            fill: false,
            xField: 'name',
            yField: 'Miles Connected',
            markerConfig: {
                type: 'circle',
                size: 4,
                radius: 4,
                'stroke-width': 0
            }
        },{
            type: 'column',
            axis: 'left',
            highlight: true,
            tips: {
              trackMouse: true,
              width: 80,
              height: 28,
              renderer: function(storeItem, item) {
                this.setTitle(storeItem.get('name') + ': ' + storeItem.get('Miles Connected') );
              }
            },
            label: {
              display: 'insideEnd',
              'text-anchor': 'middle',
                field: 'Miles Connected',
                renderer: Ext.util.Format.numberRenderer('0'),
                orientation: 'vertical',
                color: '#333'
            },
            xField: 'name',
            yField: 'Miles Connected'
        }
    ]
});
		
		
		
		
	tabs =	Ext.create('Ext.tab.Panel', {
    activeTab: 0,
    items: [
            spchart
			,mcchart
    ]
});
		
	this.toolWindow.add([tabs]);	
		
		
	}
	
	
});